[{"title":"MacOS安装与配置nginx","url":"//2021/10/23/MacOS%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEnginx/","content":"MacOS安装与配置nginx一、环境我用的是MacBook Pro M1，版本放在图里了。以下使用的终端都是iTerm2。\n\n二、安装HomebrewHomebrew是一款包管理工具，目前支持macOS和linux系统，Homebrew使用起来也很方便，如果已经安装好homebrew可以跳过这一条。\nARM版Homebrew需要安装在/opt/homebrew路径下，早期的时候需要手动创建目录执行命令，目前使用最新脚本不需要手动操作。\n直接执行：（这是官网给的命令，需要挂梯子）\n/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n国内：\n/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;\n后面根据提示往下走就行，网上教程很多随便查查就有。\n安装完成之后重启终端执行：\nbrew -v\n我的结果⬇️，提示版本信息安装完成。\n\n三、通过Homebrew安装nginx先查一下nginx是否存在：\nbrew search nginx\n\n然后执行：\nbrew install nginx\n等待一会安装就完成了。然后使用brew info nginx命令查看nginx安装目录等信息。红色部分是nginx.config的位置，在旧版本Mac中应该是/usr/local/etc/nginx目录下，这里要注意一下。\n\n用vim编辑nginx.conf配置自己需要的东西吧。\n","tags":["nginx","MacOS","homebrew安装"]},{"title":"【前端】fetch学习","url":"//2022/03/18/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91fetch%E5%AD%A6%E4%B9%A0/","content":"【前端】fetch学习fetch是什么？引用MDN的解释：\nFetch API 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，例如请求和响应。它还提供了一个全局 fetch() 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。\n这种功能以前是使用 XMLHttpRequest 实现的。Fetch 提供了一个更理想的替代方案，可以很容易地被其他技术使用，例如  Service Workers。Fetch 还提供了专门的逻辑空间来定义其他与 HTTP 相关的概念，例如 CORS 和 HTTP 的扩展。\nfetch可以实现get和post方法，可以从请求的URL获取内容。我暂时只写get方法。\n举个栗子。常规的：fetch(&#x27;https://jsonplaceholder.typicode.com/posts&#x27;)    .then(response =&gt; &#123;        console.log(response.json())    &#125;)\n这里这个链接是100个json：\n\n如果直接在webstorm运行应该会报错，我写了个简易的html调试一下。\n\n在网页控制台可以看到，返回了一个Promise对象。fetch的返回值是一个Promise类型的对象。\n\n换个方式写：async function getData() &#123;    const response = await fetch(&#x27;https://jsonplaceholder.typicode.com/posts&#x27;)    const posts = await response.json()    console.log(posts)&#125;getData()\n这个时候看到控制台输出的事一个object对象，response.json()返回一个promise，但是加上await就变成了这个对象的值了。\n\n稍微修饰一下。\n\n结果：\n\n用fetch做一些http请求还挺方便的，后面我再更新关于post方法的使用吧。\n","tags":["await","javascript","fetch","get请求"]},{"title":"【前端】发布-订阅模式学习","url":"//2022/03/20/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/","content":""},{"title":"使用mysql实现七种连接方式","url":"//2021/10/28/%E4%BD%BF%E7%94%A8mysql%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/","content":"使用mysql实现七种连接方式先建两张表：\nCREATE DATABASE db0206;USE db0206# 姓名表create table table_name(\tid int(11) primary key auto_increment,\tuser_id int(11) default 0,\tname varchar(5) default &#x27;&#x27;);# 年龄表create table table_age(\tid int(11) primary key auto_increment,\tuser_id int(11) default 0,\tage int(11) default 0);\n建好表后随便添加几条数据\n# 名字表少一条 user_id = 3insert into table_name(user_id, name)values(1, &quot;小赵&quot;), (2, &quot;小钱&quot;);# 年龄表少一条 user_id = 2insert into table_age(user_id, age)values(1, 21), (3, 23);\n\nInner Joinmysql&gt; select a.user_id, name, age      -&gt; from table_name as a inner join table_age as b      -&gt; on a.user_id=b.user_id;# 输出结果+---------+--------+------+| user_id | name   | age  |+---------+--------+------+|       1 | 小赵   |   21 |+---------+--------+------+\nLeft Joinmysql&gt; select a.user_id, name, agefrom table_name as a left join table_age as bon a.user_id=b.user_id;# 输出结果+---------+--------+------+| user_id | name   | age  |+---------+--------+------+|       1 | 小赵   |   21 ||       2 | 小钱   | NULL |+---------+--------+------+\nRight Joinmysql&gt; select b.user_id, name, agefrom table_name as a right join table_age as bon a.user_id=b.user_id;+---------+--------+------+| user_id | name   | age  |+---------+--------+------+|       1 | 小赵   |   21 ||       3 | NULL   |   23 |+---------+--------+------+\n\nUnionmysql&gt; select a.user_id, name, age from table_name as a left join table_age as bon a.user_id =b.user_idunionselect b.user_id, name, age from table_name as a right join table_age as bon a.user_id =b.user_id;+---------+--------+------+| user_id | name   | age  |+---------+--------+------+|       1 | 小赵   |   21 ||       2 | 小钱   | NULL ||       3 | NULL   |   23 |+---------+--------+------+\nLeft Join Excluding Inner Joinmysql&gt; select a.user_id, name, age    -&gt; from table_name as a left join table_age as b    -&gt; on a.user_id=b.user_id    -&gt; where b.user_id is null;    +---------+--------+------+| user_id | name   | age  |+---------+--------+------+|       2 | 小钱   | NULL |+---------+--------+------+\nRight Join Excluding Inner Joinmysql&gt; select b.user_id, name, age    -&gt; from table_name as a right join table_age as b    -&gt; on a.user_id=b.user_id    -&gt; where a.user_id is null;    +---------+------+------+| user_id | name | age  |+---------+------+------+|       3 | NULL |   23 |+---------+------+------+\nOuter Join Excluding Inner Joinmysql&gt; select a.user_id, name, age    -&gt; from table_name as a left join table_age as b    -&gt; on a.user_id =b.user_id    -&gt; where b.user_id is null    -&gt; union    -&gt; select b.user_id, name, age    -&gt; from table_name as a right join table_age as b    -&gt; on a.user_id =b.user_id    -&gt; where a.user_id is null;    +---------+--------+------+| user_id | name   | age  |+---------+--------+------+|       2 | 小钱   | NULL ||       3 | NULL   |   23 |+---------+--------+------+\n\n\n","tags":["南邮","南京邮电大学","mysql","join"]},{"title":"在学校服务器上源码编译安装Mysql-8.0.25并运行","url":"//2021/10/26/%E5%9C%A8%E5%AD%A6%E6%A0%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Mysql-8-0-25%E5%B9%B6%E8%BF%90%E8%A1%8C/","content":"在学校服务器上源码编译安装Mysql-8.0.25并运行一、创建需要的目录连接NJUPT即可在自己的电脑上访问上课给的服务器，我懒得写一大堆命令，在MacOS系统的Transmit App里连接了服务器，之间图形界面把题目要求的文件夹建好了。\n# 目录如下~/mysql-8.0.25/my_build/package\n\n在package目录下还要\nmkdir bin lib share etc\n二、cmake编译老师说服务器上的cmake版本不够编译mysql-8.0.25，有cmake3.22的安装包但不是默认环境。\n总之先打开终端\n\n1、cmake编译我先copy一下PPT里给的命令看看什么效果。学校的服务器自带cmake，没有的可以自己配置一下。\ncmake .. \\-DCMAKE_INSTALL_PREFIX=$HOME/mysql-8.0.25/&#123;YOUR_DIRECTORY&#125;/package \\-DWITH_EXTRA_CHARSETS:STRING=all \\-DDOWNLOAD_BOOST=1 \\-DWITH_BOOST=../boost \\-DWITH_EMBEDDED_SERVER:BOOL=OFF \\-DWITH_MYISAM_STORAGE_ENGINE=1 \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DENABLED_LOCAL_INFILE=1 \\-DWITH_SSL=system \\-DCMAKE_CXX_COMPILER=/usr/bin/g++ \\-DCMAKE_C_COMPILER=/usr/bin/gcc\n\n没有出现报错，那接着往下，执行make -j 64。\n\n这个报错出现了超多次，使用cmake -version看了一下版本是3.22。g++ -version看g++版本是10.0.1。\n他妈的什么申必服务器，Google解决方案都要sudo但是学生账号没有服务器的sudo权限。\ng++: 错误：unrecognized command line option ‘-std=c++14’\n2、解决g++无法解析c++14的问题该说不说，学校这个服务器应该是被其他学生玩坏了，查了一下/user/bin目录下的gcc版本才4.8.5，害我大半夜在这疯狂找cmake指定gcc的方法。\n\n发现问题在/usr/bin下的gcc版本不够，那么干脆把B19031717文件夹下东西都删了，重新创建了package和下面的bin等四个目录。然后重新cmake编译一下。\n执行find / -name &quot;gcc&quot;命令发现gcc文件在/usr/local/bin下也有一个，并且版本是10.0.1，重新cmake编译时记得把DCMAKE_CXX_COMPILER和DCMAKE_C_COMPILER两个路径改成gcc版本高于5.2的路径（mysql-8.0.25需要gcc5.2以上）。\ncmake .. \\-DCMAKE_INSTALL_PREFIX=$HOME/mysql-8.0.25/&#123;YOUR_DIRECTORY&#125;/package \\-DWITH_EXTRA_CHARSETS:STRING=all \\-DDOWNLOAD_BOOST=1 \\-DWITH_BOOST=../boost \\-DWITH_EMBEDDED_SERVER:BOOL=OFF \\-DWITH_MYISAM_STORAGE_ENGINE=1 \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DENABLED_LOCAL_INFILE=1 \\-DWITH_SSL=system \\-DCMAKE_CXX_COMPILER=/usr/local/bin/g++ \\-DCMAKE_C_COMPILER=/usr/local/bin/gcc\n编译未报错，然后执行make -j 64\n\n执行make install\n\n执行cd package然后执行cp -r bin lib share etc ~/与 cd\n现在根目录就能看到bin、lib、share、etc四个文件夹，执行vim etc/my.cnf并写入如下内容。\n\n3、安装、初始化与启动# 安装mkdir -p ~/data/data ~/data/redo ~/data/tmp ~/data/binlog ~/data/relaylog ~/data/undomkdir log\n# 初始化./bin/mysqld --defaults-file=&quot;$HOME/etc/my.cnf&quot; --initialize-insecure --datadir=&quot;$HOME/data/data&quot; \n# 启动./bin/mysqld --defaults-file=&quot;$HOME/etc/my.cnf&quot; --datadir=&quot;$HOME/data/data&quot; --pid-file=&quot;$HOME/bin/mysqld1.pid&quot; &amp;\n安装没出现报错，但是初始化时产生了奇怪的问题。貌似是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库。\n\n执行一下strings /usr/lib64/libstdc++.so.6 | grep GLIBC命令，发现如GLIBCXX的版本并不匹配。\n\n执行find / -name &quot;libstdc++.so*&quot;查找编译gcc时生成的最新动态库。发现了/usr/local/lib64/libstdc++.so.6.0.28 //最新动态库\n而在上图中使用的库是/usr/lib64/libstdc++.so.6。\n\n我们需要修改系统默认动态库的指向，即：重建默认库的软连接。但是学生账号没有权限，寄。\n气死了，马上到最后一步了，现在没有权限什么也干不了，早知道在自己的服务器上跑了！！\n","tags":["南邮","南京邮电大学","Mysql-8.0.25","实践周作业"]},{"title":"解决 React@18 报错react_dom.render is not a fuinction","url":"//2022/05/17/%E8%A7%A3%E5%86%B3-React-18-%E6%8A%A5%E9%94%99react-dom-render-is-not-a-fuinction/","content":"解决 React@18 报错react_dom.render is not a fuinction 错误我的依赖版本：&quot;dependencies&quot;: &#123;    &quot;@testing-library/jest-dom&quot;: &quot;^5.16.4&quot;,    &quot;@testing-library/react&quot;: &quot;^13.2.0&quot;,    &quot;@testing-library/user-event&quot;: &quot;^13.5.0&quot;,    &quot;react&quot;: &quot;^18.1.0&quot;,    &quot;react-dom&quot;: &quot;^18.1.0&quot;,    &quot;react-scripts&quot;: &quot;5.0.1&quot;,    &quot;web-vitals&quot;: &quot;^2.1.4&quot;  &#125;\n使用 create-react-app &quot;ProjectName&quot;创建项目。\n删除 src 目录下多余项，只保留 App.js / index.js / index.css 三个文件。\nApp.js：\nfunction App() &#123;  return (    &lt;div className=&quot;App&quot;&gt;      app    &lt;/div&gt;  )&#125;export default App;\nindex.js：\nimport React from &#x27;react&#x27;;import ReactDOM from &#x27;react-dom/client&#x27;;import &#x27;./index.css&#x27;;import App from &#x27;./App&#x27;;ReactDOM.render(  &lt;React.StrictMode&gt;    &lt;App /&gt;  &lt;/React.StrictMode&gt;,  document.getElementById(&quot;root&quot;));\n其他文件不动，npm start启动项目\n在控制台输出报错：index.js:6 Uncaught TypeError: react_dom_client__WEBPACK_IMPORTED_MODULE_1__.render is not a function    at Module../src/index.js (index.js:6:1)    at Module.options.factory (react refresh:6:1)    at __webpack_require__ (bootstrap:24:1)    at startup:7:1    at startup:7:1\n解决方案：在 React18 以后不能直接使用ReactDOM.render命令，要改写成：\nIndex.js：\nimport React from &#x27;react&#x27;;import ReactDOM from &#x27;react-dom/client&#x27;;import &#x27;./index.css&#x27;;import App from &#x27;./App&#x27;;const root = ReactDOM.createRoot(document.getElementById(&quot;root&quot;))root.render(  &lt;React.StrictMode&gt;    &lt;App /&gt;  &lt;/React.StrictMode&gt;);\n如果想使用旧版代码，在创建项目时使用npx create-react-app &quot;ProjectName&quot;命令即可。\n原文链接：Deprecation notice: ReactDOM.render is no longer supported in React 18\n","tags":["React","前端"]}]